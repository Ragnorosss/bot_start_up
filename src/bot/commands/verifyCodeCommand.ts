import { Context, Markup } from 'telegraf';
import { User } from '@/bot/models/user';

function isTextMessage(message: any): message is { text: string } {
    return message && typeof message.text === 'string';
  }
  
export const verifyCodeCommand = async (ctx: Context) => {
  if (ctx.message && isTextMessage(ctx.message)) {
    const [command, code] = ctx.message.text.split(' ');

    if (!code) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /verifycode');
      return;
    }

    if (ctx.chat && 'id' in ctx.chat) {
      const { id: chatId } = ctx.chat;
      const user = await User.findOne({ chatId });

      const keyboard = Markup.keyboard([
        ['üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏']
      ]).resize();

      if (user && user.verificationCode === code) {
        user.isVerified = true;
        user.verificationCode = undefined;
        await user.save();
        ctx.reply('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', keyboard);
      } else {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', keyboard);
      }
    } else {
      ctx.reply('–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  } else {
    ctx.reply('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º.');
  }
};
